#!/usr/bin/env python3

import argparse
import subprocess
import re
import csv

# Split out the command line
parser = argparse.ArgumentParser()
parser.add_argument('--file', action='store', dest='filename', required=False,
                    default='benchmark/results/*p256-dilithium2_kyber-512.pcap', help='Name of tshark pcap file')
parser.add_argument('--port', action='store', dest='port', required=False,
                    default=2222, help='TCP/TLS socket number')
arg = parser.parse_args()

# Build out the tshark command
tshark_cmd = 'tshark -r {} -d tcp.port=={},ssh -2R "ssh or tcp"'
tshark_cmd = tshark_cmd.format(arg.filename, arg.port,)

# Execute the tshark command
output = \
    subprocess.Popen(tshark_cmd, shell=True,
                     stdout=subprocess.PIPE).stdout.read()

# print(output.decode())
# Look for start/finish of the TLS session
loop_count = 0
start_dict = {}
finish_dict = {}
start_time = 0
rtt_start = 0
rtt = 0
tcp_retran_count = 0
client_switch = 0
server_switch = 0
note = 0
deb = 0

results = []
results.append(['Loop [#]', 'RTT [s]', 'Start [#]', 'Start [s]', 'New Keys [#]',
                'New Keys [s]', 'End [#]', 'End [s]', 'KEX Time [s]', 'AUTH Time [s]', 'HS Time [s]'])
#  0 Loop
#  1 RTT
#  2 Start No.
#  3 Start Time
#  4 New Keys No.
#  5 New Keys Time
#  6 End No.
#  7 End Time
#  8 KEX Time
#  9 AUTH Time
# 10 HS Time

I_LOOP = 0
I_RTT = 1
I_START_NO = 2
I_START_T = 3
I_NEWKEYS_NO = 4
I_NEWKEYS_T = 5
I_END_NO = 6
I_END_T = 7
I_KEX_T = 8
I_AUTH_T = 9
I_HS_T = 10
EMPTY_LINE = ['', '', '', '', '', '', '', '', '', '', '', '']

output = output.decode()
for line in output.split('\n'):
    line = line.strip(' ')
    # print(line)
    # Beginning of the session
    if line.find('TCP Retransmission') != -1:
        tcp_retran_count += 1
    else:
        if line.find('[SYN]') != -1:
            server_count = 0
            end_flag = 0
            loop_count += 1
            tcp_retran_count = 0
            line = re.sub(' +', ' ', line)
            line_list = line.split(' ')
            rtt_start = float(line_list[1])
            res_line = [None] * 11
            res_line[I_LOOP] = loop_count
            continue
        if line.find('[SYN, ACK]') != -1:
            line = re.sub(' +', ' ', line)
            line_list = line.split(' ')
            res_line[I_RTT] = float(line_list[1]) - rtt_start
            continue
        if line.find('Client: Protocol') != -1:
            line = re.sub(' +', ' ', line)
            line_list = line.split(' ')
            res_line[I_START_NO] = float(line_list[0])
            res_line[I_START_T] = float(line_list[1])
            continue
        if line.find('[RST, ACK]') != -1:
            loop_count -= 1
            continue
        if line.find('Client: New Keys') != -1:
            end_flag = 1
            client_switch = 0
            server_switch = 0
            note = 1
            line = re.sub(' +', ' ', line)
            line_list = line.split(' ')
            res_line[I_NEWKEYS_NO] = float(line_list[0])
            res_line[I_NEWKEYS_T] = float(line_list[1])
            continue
        if end_flag == 1:
            if line.find('Client: Encrypted packet') != -1:
                if note == 1:
                    note = 0
                if server_switch == 1:
                    server_switch = 0
                    server_count += 1
                if server_count == 4:
                    client_switch = 1
                continue
            if line.find('Server: Encrypted packet') != -1:
                if note == 1:
                    server_count -= 1
                    note = 0
                server_switch = 1
                line = re.sub(' +', ' ', line)
                line_list = line.split(' ')
                res_line[I_END_NO] = float(line_list[0])
                res_line[I_END_T] = float(line_list[1])
                if client_switch == 1:
                    res_line[I_KEX_T] = res_line[I_NEWKEYS_T] - \
                        res_line[I_START_T]
                    res_line[I_AUTH_T] = res_line[I_END_T] - \
                        res_line[I_KEX_T]
                    res_line[I_HS_T] = res_line[I_KEX_T] + res_line[I_AUTH_T]
                    results.append(res_line)
                    end_flag = 0

# Print the results in CSV format
# Loop, Start packet no, Start time, Finish packet no, Handshake time, Round-Trip time (TLS [SYN] to [SYN, ACK])
# print("loop,s_no,s_time,f_no,f_time,handshake_time,rtt")
# for loop in range(1, loop_count+1):
#     print_str = str(loop) + ',' + \
#         str(start_dict[loop]) + str(finish_dict[loop])
#     print(print_str)


with open(re.sub(r'\.pcap$', '', arg.filename) + ".csv", 'w') as f:
    csv.writer(f).writerows(results)

exit(0)
